import './sourcemap-register.cjs';if(typeof __nccwpck_require__!=="undefined")__nccwpck_require__.ab=new URL(".",import.meta.url).pathname.slice(import.meta.url.match(/^file:\/\/\/\w:/)?1:0,-1)+"/";var e={};const{execSync:t}=require("child_process");const{stripIndents:n}=require("common-tags");const o=require("@actions/core");const i=require("@actions/github");const r=require("@actions/exec");const s=require("./package.json");function getGithubCommentInput(){const e=o.getInput("github-comment");if(e==="true")return true;if(e==="false")return false;return e}const{context:a}=i;const u=o.getInput("github-token");const c=getGithubCommentInput();const m=o.getInput("working-directory");const l=/{{\s*PR_NUMBER\s*}}/g;const p=/{{\s*BRANCH\s*}}/g;function isPullRequestType(e){return e.startsWith("pull_request")}function slugify(e){const t=e.toString().trim().toLowerCase().replace(/[_\s]+/g,"-").replace(/[^\w-]+/g,"").replace(/--+/g,"-").replace(/^-+/,"").replace(/-+$/,"");o.debug(`before slugify: "${e}"; after slugify: "${t}"`);return t}function retry(e,t){async function attempt(n){try{return await e()}catch(e){if(n>t){throw e}else{o.info(`retrying: attempt ${n+1} / ${t+1}`);await new Promise((e=>{setTimeout(e,3e3)}));return attempt(n+1)}}}return attempt(1)}function getVercelBin(){const e=o.getInput("vercel-version");const t=s.dependencies.vercel;return`vercel@${e||t}`}const d=o.getInput("vercel-token",{required:true});const f=o.getInput("vercel-args");const g=o.getInput("vercel-org-id");const h=o.getInput("vercel-project-id");const y=o.getInput("scope");const b=o.getInput("vercel-project-name");const v=getVercelBin();const w=o.getInput("alias-domains").split("\n").filter((e=>e!=="")).map((e=>{let t=e;let n=slugify(a.ref.replace("refs/heads/",""));if(isPullRequestType(a.eventName)){const e=a.payload.pull_request||a.payload.pull_request_target;n=slugify(e.head.ref.replace("refs/heads/",""));t=t.replace(l,a.issue.number.toString())}t=t.replace(p,n);return t}));let C;if(u){C=i.getOctokit(u)}async function setEnv(){o.info("set environment for vercel cli");if(g){o.info("set env variable : VERCEL_ORG_ID");o.exportVariable("VERCEL_ORG_ID",g)}if(h){o.info("set env variable : VERCEL_PROJECT_ID");o.exportVariable("VERCEL_PROJECT_ID",h)}}function addVercelMetadata(e,t,n){const o=`^${e}=.+`;const i=new RegExp(o,"g");for(const e of n){if(e.match(i)){return[]}}return["-m",`${e}=${t}`]}async function vercelDeploy(e,t){let n="";let i="";const s={};s.listeners={stdout:e=>{n+=e.toString();o.info(e.toString())},stderr:e=>{i+=e.toString();o.info(e.toString())}};if(m){s.cwd=m}const u=f.split(/ +/);const c=[...f.split(/ +/),...["-t",d],...addVercelMetadata("githubCommitSha",a.sha,u),...addVercelMetadata("githubCommitAuthorName",a.actor,u),...addVercelMetadata("githubCommitAuthorLogin",a.actor,u),...addVercelMetadata("githubDeployment",1,u),...addVercelMetadata("githubOrg",a.repo.owner,u),...addVercelMetadata("githubRepo",a.repo.repo,u),...addVercelMetadata("githubCommitOrg",a.repo.owner,u),...addVercelMetadata("githubCommitRepo",a.repo.repo,u),...addVercelMetadata("githubCommitMessage",`"${t}"`,u),...addVercelMetadata("githubCommitRef",e.replace("refs/heads/",""),u)];if(y){o.info("using scope");c.push("--scope",y)}await r.exec("npx",[v,...c],s);return n}async function vercelInspect(e){let t="";let n="";const i={};i.listeners={stdout:e=>{t+=e.toString();o.info(e.toString())},stderr:e=>{n+=e.toString();o.info(e.toString())}};if(m){i.cwd=m}const s=[v,"inspect",e,"-t",d];if(y){o.info("using scope");s.push("--scope",y)}await r.exec("npx",s,i);const a=n.match(/^\s+name\s+(.+)$/m);return a&&a.length?a[1]:null}async function findCommentsForEvent(){o.debug("find comments for event");if(a.eventName==="push"){o.debug('event is "commit", use "listCommentsForCommit"');return C.repos.listCommentsForCommit({...a.repo,commit_sha:a.sha})}if(isPullRequestType(a.eventName)){o.debug(`event is "${a.eventName}", use "listComments"`);return C.issues.listComments({...a.repo,issue_number:a.issue.number})}o.error("not supported event_type");return[]}async function findPreviousComment(e){if(!C){return null}o.info("find comment");const{data:t}=await findCommentsForEvent();const n=t.find((t=>t.body.startsWith(e)));if(n){o.info("previous comment found");return n.id}o.info("previous comment not found");return null}function joinDeploymentUrls(e,t){if(t.length){const n=t.map((e=>`https://${e}`));return[e,...n].join("\n")}return e}function buildCommentPrefix(e){return`Deploy preview for _${e}_ ready!`}function buildCommentBody(e,t,o){if(!c){return undefined}const i=`${buildCommentPrefix(o)}\n\n`;const r=i+(typeof c==="string"?c:n`
      âœ… Preview
      {{deploymentUrl}}

      Built with commit {{deploymentCommit}}.
      This pull request is being automatically deployed with [vercel-action](https://github.com/marketplace/actions/vercel-action)
    `);return r.replace(/\{\{deploymentCommit\}\}/g,e).replace(/\{\{deploymentName\}\}/g,o).replace(/\{\{deploymentUrl\}\}/g,joinDeploymentUrls(t,w))}async function createCommentOnCommit(e,t,n){if(!C){return}const o=await findPreviousComment(buildCommentPrefix(n));const i=buildCommentBody(e,t,n);if(o){await C.repos.updateCommitComment({...a.repo,comment_id:o,body:i})}else{await C.repos.createCommitComment({...a.repo,commit_sha:a.sha,body:i})}}async function createCommentOnPullRequest(e,t,n){if(!C){return}const o=await findPreviousComment(`Deploy preview for _${n}_ ready!`);const i=buildCommentBody(e,t,n);if(o){await C.issues.updateComment({...a.repo,comment_id:o,body:i})}else{await C.issues.createComment({...a.repo,issue_number:a.issue.number,body:i})}}async function aliasDomainsToDeployment(e){if(!e){o.error("deployment url is null")}const t=["-t",d];if(y){o.info("using scope");t.push("--scope",y)}const n=w.map((n=>retry((()=>r.exec("npx",[v,...t,"alias",e,n])),2)));await Promise.all(n)}async function run(){o.debug(`action : ${a.action}`);o.debug(`ref : ${a.ref}`);o.debug(`eventName : ${a.eventName}`);o.debug(`actor : ${a.actor}`);o.debug(`sha : ${a.sha}`);o.debug(`workflow : ${a.workflow}`);let{ref:e}=a;let{sha:n}=a;await setEnv();let r=t("git log -1 --pretty=format:%B").toString().trim();if(i.context.eventName==="push"){const e=i.context.payload;o.debug(`The head commit is: ${e.head_commit}`)}else if(isPullRequestType(i.context.eventName)){const t=i.context.payload;const s=t.pull_request||t.pull_request_target;o.debug(`head : ${s.head}`);e=s.head.ref;n=s.head.sha;o.debug(`The head ref is: ${s.head.ref}`);o.debug(`The head sha is: ${s.head.sha}`);if(C){const{data:e}=await C.git.getCommit({...a.repo,commit_sha:n});r=e.message;o.debug(`The head commit is: ${r}`)}}const s=await vercelDeploy(e,r);if(s){o.info("set preview-url output");if(w&&w.length){o.info("set preview-url output as first alias");o.setOutput("preview-url",`https://${w[0]}`)}else{o.setOutput("preview-url",s)}}else{o.warning("get preview-url error")}const m=b||await vercelInspect(s);if(m){o.info("set preview-name output");o.setOutput("preview-name",m)}else{o.warning("get preview-name error")}if(w.length){o.info("alias domains to this deployment");await aliasDomainsToDeployment(s)}if(c&&u){if(a.issue.number){o.info("this is related issue or pull_request");await createCommentOnPullRequest(n,s,m)}else if(a.eventName==="push"){o.info("this is push event");await createCommentOnCommit(n,s,m)}}else{o.info("comment : disabled")}}run().catch((e=>{o.setFailed(e.message)}));
//# sourceMappingURL=index.js.map